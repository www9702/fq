# -*- coding: utf-8 -*-
#!/usr/bin/env python3
"""
* 仅供学习交流，请在下载后的24小时内完全删除 请勿将任何内容用于商业或非法目的，否则后果自负。
* 猫猫看看 V2.20

* 活动入口,微信打开：
* 如果连接过期了运行一下就出来了最新的入口！
* http://9pw4.dsdtew.shop/haobaobao/auth/58487f291985c5f32c16b3b01b96a912
* 打开活动入口，抓包的任意接口cookies中的Cookie参数
* 
* 变量格式：
* 新建同名环境变量
* 变量名：mykkyd
* 变量值：
* # 3000 代表 3毛，后面两个推送参数可不填，那就必须配置全局推送！
* 账号备注#Cookie参数#提现金额如3000#wxpushApptoken#wxpushTopicId
* 
* 其他参数说明（脚本最下方填写参数）
* wxpusher全局参数：wxpusherAppToken、wxpusherTopicId
* 具体使用方法请看文档地址：https://wxpusher.zjiecode.com/docs/#/
* 
* 也可使用 微信机器人：wechatBussinessKey
* 
* 支持支付宝提现：账号备注#Cookie参数#提现金额如3000#wxpushApptoken#wxpushTopicId#支付宝姓名#支付宝账号
* 只想提现支付宝，不想填写其他参数，最少的参数就是：账号备注#Cookie参数###支付宝姓名#支付宝账号
*
* 增加 自定义检测文章等待时间：mykkydReadPostDelay，默认值是 15-20秒
* 增加 精简日志：mykkydReadPureLog，默认值是 true（也就是精简日志，如果需要显示完整的，请设置为 false）
*
* 定时运行每半小时一次
* 达到标准，自动提现
"""
# This file requires Python 3.x and the following dependencies:
# - base64
try:
    import base64
    exec(base64.b64decode('IiIiCiog5LuF5L6b5a2m5Lmg5Lqk5rWB77yM6K+35Zyo5LiL6L295ZCO55qEMjTlsI/ml7blhoXlrozlhajliKDpmaQg6K+35Yu/5bCG5Lu75L2V5YaF5a6555So5LqO5ZWG5Lia5oiW6Z2e5rOV55uu55qE77yM5ZCm5YiZ5ZCO5p6c6Ieq6LSf44CCCiog54yr54yr55yL55yLIFYyLjIwCgoqIOa0u+WKqOWFpeWPoyzlvq7kv6HmiZPlvIDvvJoKKiDlpoLmnpzov57mjqXov4fmnJ/kuobov5DooYzkuIDkuIvlsLHlh7rmnaXkuobmnIDmlrDnmoTlhaXlj6PvvIEKKiBodHRwOi8vOXB3NC5kc2R0ZXcuc2hvcC9oYW9iYW9iYW8vYXV0aC81ODQ4N2YyOTE5ODVjNWYzMmMxNmIzYjAxYjk2YTkxMgoqIOaJk+W8gOa0u+WKqOWFpeWPo++8jOaKk+WMheeahOS7u+aEj+aOpeWPo2Nvb2tpZXPkuK3nmoRDb29raWXlj4LmlbAKKiAKKiDlj5jph4/moLzlvI/vvJoKKiDmlrDlu7rlkIzlkI3njq/looPlj5jph48KKiDlj5jph4/lkI3vvJpteWtreWQKKiDlj5jph4/lgLzvvJoKKiAjIDMwMDAg5Luj6KGoIDPmr5vvvIzlkI7pnaLkuKTkuKrmjqjpgIHlj4LmlbDlj6/kuI3loavvvIzpgqPlsLHlv4XpobvphY3nva7lhajlsYDmjqjpgIHvvIEKKiDotKblj7flpIfms6gjQ29va2ll5Y+C5pWwI+aPkOeOsOmHkemineWmgjMwMDAjd3hwdXNoQXBwdG9rZW4jd3hwdXNoVG9waWNJZAoqIAoqIOWFtuS7luWPguaVsOivtOaYju+8iOiEmuacrOacgOS4i+aWueWhq+WGmeWPguaVsO+8iQoqIHd4cHVzaGVy5YWo5bGA5Y+C5pWw77yad3hwdXNoZXJBcHBUb2tlbuOAgXd4cHVzaGVyVG9waWNJZAoqIOWFt+S9k+S9v+eUqOaWueazleivt+eci+aWh+aho+WcsOWdgO+8mmh0dHBzOi8vd3hwdXNoZXIuemppZWNvZGUuY29tL2RvY3MvIy8KKiAKKiDkuZ/lj6/kvb/nlKgg5b6u5L+h5py65Zmo5Lq677yad2VjaGF0QnVzc2luZXNzS2V5CiogCiog5pSv5oyB5pSv5LuY5a6d5o+Q546w77ya6LSm5Y+35aSH5rOoI0Nvb2tpZeWPguaVsCPmj5DnjrDph5Hpop3lpoIzMDAwI3d4cHVzaEFwcHRva2VuI3d4cHVzaFRvcGljSWQj5pSv5LuY5a6d5aeT5ZCNI+aUr+S7mOWunei0puWPtwoqIOWPquaDs+aPkOeOsOaUr+S7mOWune+8jOS4jeaDs+Whq+WGmeWFtuS7luWPguaVsO+8jOacgOWwkeeahOWPguaVsOWwseaYr++8mui0puWPt+Wkh+azqCNDb29raWXlj4LmlbAjIyPmlK/ku5jlrp3lp5PlkI0j5pSv5LuY5a6d6LSm5Y+3CioKKiDlop7liqAg6Ieq5a6a5LmJ5qOA5rWL5paH56ug562J5b6F5pe26Ze077yabXlra3lkUmVhZFBvc3REZWxhee+8jOm7mOiupOWAvOaYryAxNS0yMOenkgoqIOWinuWKoCDnsr7nroDml6Xlv5fvvJpteWtreWRSZWFkUHVyZUxvZ++8jOm7mOiupOWAvOaYryB0cnVl77yI5Lmf5bCx5piv57K+566A5pel5b+X77yM5aaC5p6c6ZyA6KaB5pi+56S65a6M5pW055qE77yM6K+36K6+572u5Li6IGZhbHNl77yJCioKKiDlrprml7bov5DooYzmr4/ljYrlsI/ml7bkuIDmrKEKKiDovr7liLDmoIflh4bvvIzoh6rliqjmj5DnjrAKIiIiCgppbXBvcnQgaGFzaGxpYgppbXBvcnQganNvbgppbXBvcnQgbWF0aAppbXBvcnQgb3MKaW1wb3J0IHN5cwppbXBvcnQgdGltZQppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQgcmUKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlLCB1cmxwYXJzZSwgcGFyc2VfcXMKaW1wb3J0IHVybGxpYjMKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHBhcnNlX3FzLCB1cmxzcGxpdAppbXBvcnQgaGFzaGxpYgoKdXJsbGliMy5kaXNhYmxlX3dhcm5pbmdzKCkKCiMg5aGrd3hwdXNoZXLnmoRhcHBUb2tlbu+8jOmFjee9ruWcqOeOr+Wig+WPmOmHj+mHjOi/meagt+ayoemFjee9rueahOi0puWPt+S8muiHquWKqOS9v+eUqOi/meS4quaOqOmAgQp3eHB1c2hlckFwcFRva2VuID0gb3MuZ2V0ZW52KCJ3eHB1c2hlckFwcFRva2VuIikgb3IgIiIKd3hwdXNoZXJUb3BpY0lkID0gb3MuZ2V0ZW52KCJ3eHB1c2hlclRvcGljSWQiKSBvciAiIgp3ZWNoYXRCdXNzaW5lc3NLZXkgPSBvcy5nZXRlbnYoIndlY2hhdEJ1c3NpbmVzc0tleSIpIG9yICIiCm15a2t5ZERldGVjdGluZ1NlYWxTdGF0dXMgPSBUcnVlCm15a2t5ZERpc2FibGVkRGV0ZWN0aW5nU2VhbFNldHRpbmcgPSBvcy5nZXRlbnYoIm15a2t5ZERpc2FibGVkRGV0ZWN0aW5nU2VhbCIpCmlmIG15a2t5ZERpc2FibGVkRGV0ZWN0aW5nU2VhbFNldHRpbmcgbm90IGluIFsiIiwgTm9uZV06CiAgICBpZiBteWtreWREaXNhYmxlZERldGVjdGluZ1NlYWxTZXR0aW5nIGluIFsiMSIsICJ0cnVlIiwgVHJ1ZV06CiAgICAgICAgbXlra3lkRGV0ZWN0aW5nU2VhbFN0YXR1cyA9IEZhbHNlCnJlYWRQb3N0RGVsYXkgPSAwCmlmIG9zLmdldGVudigibXlra3lkUmVhZFBvc3REZWxheSIpIGFuZCBvcy5nZXRlbnYoIm15a2t5ZFJlYWRQb3N0RGVsYXkiKS5pc2RlY2ltYWwoKToKICAgIHJlYWRQb3N0RGVsYXkgPSBpbnQob3MuZ2V0ZW52KCJteWtreWRSZWFkUG9zdERlbGF5IikpCm15a2t5ZFJlYWRQdXJlTG9nID0gVHJ1ZQppZiBvcy5nZXRlbnYoIm15a2t5ZFJlYWRQdXJlTG9nIik6CiAgICBteWtreWRSZWFkUHVyZUxvZyA9IG9zLmdldGVudigibXlra3lkUmVhZFB1cmVMb2ciKSA9PSAidHJ1ZSIKIyDorr7nva7ku6PnkIblnLDlnYDlkoznq6/lj6MKcHJveGllcyA9IE5vbmUKaWYgb3MuZ2V0ZW52KCJteWtreWRIdHRwUHJveHlVcmwiKToKICAgIHByb3hpZXMgPSB7CiAgICAgICAgImh0dHAiOiBvcy5nZXRlbnYoIm15a2t5ZEh0dHBQcm94eVVybCIpLAogICAgICAgICJodHRwcyI6IG9zLmdldGVudigibXlra3lkSHR0cFByb3h5VXJsIiksCiAgICB9CgoKZGVmIGNoZWNrX2ZpbGVfbWQ1KHVybCwgZXhwZWN0ZWRfbWQ1KToKICAgICMg6I635Y+W5paH5Lu25YaF5a65CiAgICByZXNwb25zZSA9IHNhZmVfcmVxdWVzdCgiR0VUIiwgdXJsKQogICAgZGF0YSA9IHJlc3BvbnNlLmNvbnRlbnQKCiAgICAjIOiuoeeul01ENQogICAgbWQ1ID0gaGFzaGxpYi5tZDUoKQogICAgbWQ1LnVwZGF0ZShkYXRhKQogICAgY2FsY3VsYXRlZF9tZDUgPSBtZDUuaGV4ZGlnZXN0KCkKICAgICMgcHJpbnQoIuW9k+WJjeaWh+S7tueahE1ENeWAvOS4uu+8miIsIGNhbGN1bGF0ZWRfbWQ1KQogICAgIyDmr5TovoNNRDUKICAgIHJldHVybiBjYWxjdWxhdGVkX21kNSA9PSBleHBlY3RlZF9tZDUKCgpkZWYgY2hlY2tfc3RyX21kNShzdHIsIGV4cGVjdGVkX21kNSk6CiAgICAjIOiuoeeul01ENQogICAgbWQ1ID0gaGFzaGxpYi5tZDUoKQogICAgbWQ1LnVwZGF0ZShzdHIuZW5jb2RlKCJ1dGYtOCIpKQogICAgY2FsY3VsYXRlZF9tZDUgPSBtZDUuaGV4ZGlnZXN0KCkKICAgICMgcHJpbnQoIuW9k+WJjeWGheWuueeahE1ENeWAvOS4uu+8miIsIGNhbGN1bGF0ZWRfbWQ1KQogICAgIyDmr5TovoNNRDUKICAgIHJldHVybiBjYWxjdWxhdGVkX21kNSA9PSBleHBlY3RlZF9tZDUKCgpkZWYgZXh0cmFjdF9taWRkbGVfdGV4dChzb3VyY2UsIGJlZm9yZV90ZXh0LCBhZnRlcl90ZXh0LCBhbGxfbWF0Y2hlcz1GYWxzZSk6CiAgICByZXN1bHRzID0gW10KICAgIHN0YXJ0X2luZGV4ID0gc291cmNlLmZpbmQoYmVmb3JlX3RleHQpCgogICAgd2hpbGUgc3RhcnRfaW5kZXggIT0gLTE6CiAgICAgICAgc291cmNlX2FmdGVyX2JlZm9yZV90ZXh0ID0gc291cmNlW3N0YXJ0X2luZGV4ICsgbGVuKGJlZm9yZV90ZXh0KSA6XQogICAgICAgIGVuZF9pbmRleCA9IHNvdXJjZV9hZnRlcl9iZWZvcmVfdGV4dC5maW5kKGFmdGVyX3RleHQpCgogICAgICAgIGlmIGVuZF9pbmRleCA9PSAtMToKICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgcmVzdWx0cy5hcHBlbmQoc291cmNlX2FmdGVyX2JlZm9yZV90ZXh0WzplbmRfaW5kZXhdKQogICAgICAgIGlmIG5vdCBhbGxfbWF0Y2hlczoKICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgc291cmNlID0gc291cmNlX2FmdGVyX2JlZm9yZV90ZXh0W2VuZF9pbmRleCArIGxlbihhZnRlcl90ZXh0KSA6XQogICAgICAgIHN0YXJ0X2luZGV4ID0gc291cmNlLmZpbmQoYmVmb3JlX3RleHQpCgogICAgcmV0dXJuIHJlc3VsdHMgaWYgYWxsX21hdGNoZXMgZWxzZSByZXN1bHRzWzBdIGlmIHJlc3VsdHMgZWxzZSAiIgoKCmRlZiBwdXNoKGFwcFRva2VuLCB0b3BpY0lkcywgdGl0bGUsIGxpbmssIHRleHQsIHR5cGUpOgogICAgZGF0YXB1c3QgPSB7CiAgICAgICAgImFwcFRva2VuIjogYXBwVG9rZW4sCiAgICAgICAgImNvbnRlbnQiOiBmIiIiPGJvZHkgb25sb2FkPSJ3aW5kb3cubG9jYXRpb24uaHJlZj0ne2xpbmt9JyI+5Ye6546w5qOA5rWL5paH56ug77yB77yB77yBXG48YSBzdHlsZT0ncGFkZGluZzoxMHB4O2NvbG9yOnJlZDtmb250LXNpemU6MjBweDsnIGhyZWY9J3tsaW5rfSc+54K55Ye75oiR5omT5byA5b6F5qOA5rWL5paH56ugPC9hPlxu6K+35bC95b+r54K55Ye76ZO+5o6l5a6M5oiQ6ZiF6K+7XG7lpIfms6jvvJp7dGV4dH08L2JvZHk+IiIiLAogICAgICAgICJzdW1tYXJ5IjogdGl0bGUgb3IgIueMq+eMq+eci+eci+mYheivuyIsCiAgICAgICAgImNvbnRlbnRUeXBlIjogMiwKICAgICAgICAidG9waWNJZHMiOiBbdG9waWNJZHMgb3IgIjExNjg2Il0sCiAgICAgICAgInVybCI6IGxpbmssCiAgICB9CiAgICAjIHByaW50KGRhdGFwdXN0KQogICAgdXJscHVzdCA9ICJodHRwOi8vd3hwdXNoZXIuemppZWNvZGUuY29tL2FwaS9zZW5kL21lc3NhZ2UiCiAgICB0cnk6CiAgICAgICAgcCA9IHNhZmVfcmVxdWVzdCgiUE9TVCIsIHVybD11cmxwdXN0LCBqc29uPWRhdGFwdXN0LCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgIyBwcmludChwKQogICAgICAgIGlmIHAuanNvbigpWyJjb2RlIl0gPT0gMTAwMDoKICAgICAgICAgICAgcHJpbnQoIuKchSDmjqjpgIHmlofnq6DliLDlvq7kv6HmiJDlip/vvIzor7flsL3lv6vliY3lvoDngrnlh7vmlofnq6DvvIzkuI3nhLblsLHpu5Hlj7fllabvvIEiKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCLinYwg5o6o6YCB5paH56ug5Yiw5b6u5L+h5aSx6LSl77yM5a6M54qK5a2Q77yM6KaB6buR5Y+35LqG77yBIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBleGNlcHQ6CiAgICAgICAgcHJpbnQoIuKdjCDmjqjpgIHmlofnq6DliLDlvq7kv6HlpLHotKXvvIzlrozniorlrZDvvIzopoHpu5Hlj7fkuobvvIEiKQogICAgICAgIHJldHVybiBGYWxzZQoKCmRlZiBwdXNoV2VjaGF0QnVzc2luZXNzKHJvYm90S2V5LCBsaW5rKToKICAgIGRhdGFwdXN0ID0geyJtc2d0eXBlIjogInRleHQiLCAidGV4dCI6IHsiY29udGVudCI6IGxpbmt9fQogICAgIyBwcmludChkYXRhcHVzdCkKICAgIHVybHB1c3QgPSAiaHR0cHM6Ly9xeWFwaS53ZWl4aW4ucXEuY29tL2NnaS1iaW4vd2ViaG9vay9zZW5kP2tleT0iICsgcm9ib3RLZXkKICAgIHRyeToKICAgICAgICBwID0gc2FmZV9yZXF1ZXN0KCJQT1NUIiwgdXJsPXVybHB1c3QsIGpzb249ZGF0YXB1c3QsIHZlcmlmeT1GYWxzZSkKICAgICAgICAjIHByaW50KHApCiAgICAgICAgaWYgcC5qc29uKClbImVycmNvZGUiXSA9PSAwOgogICAgICAgICAgICBwcmludCgi4pyFIOaOqOmAgeaWh+eroOWIsOS8geS4muW+ruS/oeaIkOWKn++8gSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIuKdjCDmjqjpgIHmlofnq6DliLDkvIHkuJrlvq7kv6HlpLHotKXvvIEiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIGV4Y2VwdDoKICAgICAgICBwcmludCgi4p2MIOaOqOmAgeaWh+eroOWIsOS8geS4muW+ruS/oeWksei0pe+8gSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgoKZGVmIGdldGluZm8obGluayk6CiAgICB0cnk6CiAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgiR0VUIiwgbGluaywgdmVyaWZ5PUZhbHNlKQogICAgICAgICMgcHJpbnQobGluaywgci50ZXh0KQogICAgICAgIGh0bWwgPSByZS5zdWIoIlxzIiwgIiIsIHIudGV4dCkKICAgICAgICBiaXogPSByZS5maW5kYWxsKCd2YXJiaXo9IiguKj8pIlx8XHwnLCBodG1sKQogICAgICAgIGlmIGJpeiAhPSBbXToKICAgICAgICAgICAgYml6ID0gYml6WzBdCiAgICAgICAgaWYgYml6ID09ICIiIG9yIGJpeiA9PSBbXToKICAgICAgICAgICAgaWYgIl9fYml6IiBpbiBsaW5rOgogICAgICAgICAgICAgICAgYml6ID0gcmUuZmluZGFsbCgiX19iaXo9KC4qPykmIiwgbGluaykKICAgICAgICAgICAgICAgIGlmIGJpeiAhPSBbXToKICAgICAgICAgICAgICAgICAgICBiaXogPSBiaXpbMF0KICAgICAgICBuaWNrbmFtZSA9IHJlLmZpbmRhbGwoJ3Zhcm5pY2tuYW1lPWh0bWxEZWNvZGVcKCIoLio/KSJcKTsnLCBodG1sKQogICAgICAgIGlmIG5pY2tuYW1lICE9IFtdOgogICAgICAgICAgICBuaWNrbmFtZSA9IG5pY2tuYW1lWzBdCiAgICAgICAgdXNlcl9uYW1lID0gcmUuZmluZGFsbCgndmFydXNlcl9uYW1lPSIoLio/KSI7JywgaHRtbCkKICAgICAgICBpZiB1c2VyX25hbWUgIT0gW106CiAgICAgICAgICAgIHVzZXJfbmFtZSA9IHVzZXJfbmFtZVswXQogICAgICAgIG1zZ190aXRsZSA9IHJlLmZpbmRhbGwoInZhcm1zZ190aXRsZT0nKC4qPyknXC5odG1sXCgiLCBodG1sKQogICAgICAgIGlmIG1zZ190aXRsZSAhPSBbXToKICAgICAgICAgICAgbXNnX3RpdGxlID0gbXNnX3RpdGxlWzBdCiAgICAgICAgdGV4dCA9IGYi5YWs5LyX5Y+35ZSv5LiA5qCH6K+G77yae2Jpen185paH56ugOnttc2dfdGl0bGV9fOS9nOiAhTp7bmlja25hbWV9fOi0puWPtzp7dXNlcl9uYW1lfSIKICAgICAgICBwcmludCh0ZXh0KQogICAgICAgIHJldHVybiBuaWNrbmFtZSwgdXNlcl9uYW1lLCBtc2dfdGl0bGUsIHRleHQsIGJpegogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICMgcHJpbnQoZSkKICAgICAgICBwcmludCgi4p2MIOaPkOWPluaWh+eroOS/oeaBr+Wksei0pSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgoKZGVmIHRyaW1TcGFjZUNoYXJhY3RlcnModGV4dCk6CiAgICByZXR1cm4gIiIuam9pbih0ZXh0LnNwbGl0KCkpCgoKY2xhc3MgTGlua0NhY2hlOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGZpbGVfcGF0aCk6CiAgICAgICAgc2VsZi5maWxlX3BhdGggPSBmaWxlX3BhdGgKICAgICAgICBzZWxmLmNhY2hlID0gc2VsZi5sb2FkX2NhY2hlKCkKCiAgICBkZWYgbG9hZF9jYWNoZShzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3BlbihzZWxmLmZpbGVfcGF0aCwgInIiKSBhcyBmOgogICAgICAgICAgICAgICAgZGF0YSA9IGpzb24ubG9hZChmKQogICAgICAgICAgICByZXR1cm4gZGF0YQogICAgICAgIGV4Y2VwdCAoRmlsZU5vdEZvdW5kRXJyb3IsIGpzb24uSlNPTkRlY29kZUVycm9yKToKICAgICAgICAgICAgcmV0dXJuIHt9CgogICAgZGVmIHNhdmVfY2FjaGUoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aXRoIG9wZW4oc2VsZi5maWxlX3BhdGgsICJ3IikgYXMgZjoKICAgICAgICAgICAgICAgIGpzb24uZHVtcChzZWxmLmNhY2hlLCBmLCBpbmRlbnQ9MikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KCLml6Dms5Xkv53lrZjpk77mjqXliLDmnKzlnLDnvJPlrZjmlofku7bvvJoiLCBlKQoKICAgIGRlZiBhZGRfbGluayhzZWxmLCBsaW5rLCBkYXRlKToKICAgICAgICBpZiBsaW5rIG5vdCBpbiBzZWxmLmNhY2hlOgogICAgICAgICAgICBzZWxmLmNhY2hlW2xpbmtdID0geyJwdWJsaXNoRGF0ZSI6IGRhdGUsICJjb3VudCI6IDF9CiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5jYWNoZVtsaW5rXVsiY291bnQiXSArPSAxCiAgICAgICAgc2VsZi5zYXZlX2NhY2hlKCkKCiAgICBkZWYgZ2V0X2xpbmtfaW5mbyhzZWxmLCBsaW5rKToKICAgICAgICByZXR1cm4gc2VsZi5jYWNoZS5nZXQobGluaywgTm9uZSkKCiAgICBkZWYgZ2V0X2FsbF9saW5rcyhzZWxmKToKICAgICAgICByZXR1cm4gbGlzdChzZWxmLmNhY2hlLmtleXMoKSkKCgpsaW5rX2NhY2hlID0gTGlua0NhY2hlKCJodWFuc2hlbmdfbXlra19saW5rX2NhY2hlLmpzb24iKQoKCmRlZiBmZXRjaF93eF90aW1lX2FuZF9yZWNvcmQodXJsLCBsaW5rX2NhY2hlKToKICAgIG1heF9yZXRyaWVzID0gMwogICAgaGVhZGVycyA9IHsKICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IFJNWDE5NzEgQnVpbGQvUUtRMS4xOTA5MTguMDAxOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzExNi4wLjAuMCBNb2JpbGUgU2FmYXJpLzUzNy4zNiBYV0VCLzExNjAwODMgTU1XRUJTREsvMjAyMzEyMDIgTU1XRUJJRC84MzQyIE1pY3JvTWVzc2VuZ2VyLzguMC40Ny4yNTYwKDB4MjgwMDJGNTEpIFdlQ2hhdC9hcm02NCBXZWl4aW4gTmV0VHlwZS9XSUZJIExhbmd1YWdlL3poX0NOIEFCSS9hcm02NCIKICAgIH0KICAgIGZvciBpIGluIHJhbmdlKG1heF9yZXRyaWVzKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHVybCwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICB3eCA9IHJlc3BvbnNlLnRleHQKICAgICAgICAgICAgd3pfdGltZV9yZWdleCA9IHIidmFyIGNyZWF0ZVRpbWUgPSAnKC4qPyknOyIKICAgICAgICAgICAgbWF0Y2ggPSByZS5zZWFyY2god3pfdGltZV9yZWdleCwgd3gpCiAgICAgICAgICAgIGlmIG1hdGNoOgogICAgICAgICAgICAgICAgYXJ0aWNsZV90aW1lID0gbWF0Y2guZ3JvdXAoMSkKICAgICAgICAgICAgICAgIHByaW50KGYi5b6u5L+h5paH56ug5Y+R5biD5pe26Ze0OiB7YXJ0aWNsZV90aW1lfSIpCiAgICAgICAgICAgICAgICBsaW5rX2luZm8gPSBsaW5rX2NhY2hlLmdldF9saW5rX2luZm8odXJsKQogICAgICAgICAgICAgICAgcHJpbnQoZiLor6Xmo4DmtYvmlofnq6DvvIzlt7LorrDlvZXkuoYge2xpbmtfaW5mb1snY291bnQnXSBpZiBsaW5rX2luZm8gZWxzZSAwICsgMX0g5qyhIikKICAgICAgICAgICAgICAgIGxpbmtfY2FjaGUuYWRkX2xpbmsodXJsLCBhcnRpY2xlX3RpbWUpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiLmo4DmtYvlvq7kv6Hmlofnq6Dml7bpl7Tlj5HnlJ/plJnor686IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCgoKZGVmIHNhZmVfcmVxdWVzdChtZXRob2QsIHVybCwgcmV0cmllcz0zLCAqKmt3YXJncyk6CiAgICBmb3IgaSBpbiByYW5nZShyZXRyaWVzKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIG1ldGhvZC51cHBlcigpID09ICJHRVQiOgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCAqKmt3YXJncykKICAgICAgICAgICAgZWxpZiBtZXRob2QudXBwZXIoKSA9PSAiUE9TVCI6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QodXJsLCAqKmt3YXJncykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYi5LiN5pSv5oyB55qE6K+35rGC57G75Z6LOiB7bWV0aG9kfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UKICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5SZXF1ZXN0RXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYi6K+35rGC5aSx6LSlOiB7ZX0iKQogICAgICAgICAgICBpZiBpIDwgcmV0cmllcyAtIDE6ICAjIOWmguaenOS4jeaYr+acgOWQjuS4gOasoeWwneivle+8jOWwseetieW+heS4gOauteaXtumXtOWGjemHjeivlQogICAgICAgICAgICAgICAgd2FpdCA9IHJhbmRvbS5yYW5kaW50KDEsIDUpICAjIOmaj+acuuetieW+heaXtumXtAogICAgICAgICAgICAgICAgcHJpbnQoZiLnrYnlvoUge3dhaXR9IOenkuWQjumHjeivlS4uLiIpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHdhaXQpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludCgi5bCd6K+V6K+35rGC5aSx6LSl77yM5bey6L6+5Yiw5pyA5aSn5bCd6K+V5qyh5pWwIikKICAgICAgICAgICAgICAgIHJldHVybiBOb25lICAjIOaIluiAheS9oOWPr+S7pei/lOWbnuS4gOS4queJueWumueahOWAvOaIluWvueixoeadpeihqOekuuivt+axguWksei0pQoKCmRlZiB0cygpOgogICAgcmV0dXJuIHN0cihpbnQodGltZS50aW1lKCkpKSArICIwMDAiCgoKY2hlY2tEaWN0ID0gewogICAgIk16a3hOVEUzTXpRNE1RPT0iOiBbIummmeWnkOeIseaXheihjCIsICJnaF81NGE2NWRjNjAwMzkiXSwKICAgICJNemc1TWpNME1ERXdOdz09IjogWyLmiJHmnKzpnZ7lh6EiLCAiZ2hfNDZiMDc2OTAzNDczIl0sCiAgICAiTXpVek9EWTROekUyT1E9PSI6IFsi5aSa6IKJ6JGh6JCEMjAyMCIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNemt5TWpFM016WXhNZz09IjogWyJZb3VoZnVsIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16a3hOak13TkRJek9BPT0iOiBbIuWwkeW5tOayoeacieS5jOaJmOmCpjMiLCAiZ2hfYjNkNzljZDFlMWI1Il0sCiAgICAiTXpnM056VXhNamM1TWc9PSI6IFsi5pif5pif6K+66KiAIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16ZzROVGN3T0RFMU5BPT0iOiBbIuaWkemprOi/mOayoeedoTEyMyIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNemswT0RJeE9ERTRPUT09IjogWyLmjIHlrrblppnmi5vlrp3lhbgiLCAiZ2hfYjNkNzljZDFlMWI1Il0sCiAgICAiTXpnMk5qVXlNakkxTkE9PSI6IFsiTGlsaW5uZyIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNekl6TURjek9EZzRNdz09IjogWyLmnInmlYXkuovnmoTlkIzlraZZIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16ZzVPRFV5TXpZek1RPT0iOiBbIjc4OeS5n+S4jeihjCIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNelUwTnpJNU1qYzRPUT09IjogWyLnmq7om4vnmKbogonnjKoiLCAiZ2hfNThkN2VlNTkzYjg2Il0sCiAgICAiTXpnNU1EZ3hPREF6TWc9PSI6IFsi5YyX5YyX5bCP5Yqp5omLIiwgImdoXzU4ZDdlZTU5M2I4NiJdLAogICAgIk16SXpNRGN6T0RnNE13PT0iOiBbIuacieaVheS6i+eahOWQjOWtplkiLCAiZ2hfYjhiOTI5MzRkYTVmIl0sCiAgICAiTXpreE5EVTFOREV6Tnc9PSI6IFsi54yr54yr55yL55yL5pyN5YqhIiwgImdoX2U1MGNmZWZlZjllNSJdLAogICAgIk16a3pOVFl4T1RneU1BPT0iOiBbIumfreiPnOeCkumxv+mxvCIsICJnaF9jMTMxYzNlZTExODciXSwKICAgICJNemt4TkRZek9URXlNdz09IjogWyLok53ojpPlj6/kuZAiLCAiZ2hfNzNjYTIzOGFkZDk3Il0sCiAgICAiTXprd01UWXdOemN3TXc9PSI6IFsi6Im+5YWL6YeM6bitIiwgImdoXzc3YWNhZmQ1NTJkYSJdLAogICAgIk16a3lOalkwTVRFeE9BPT0iOiBbIuWkp+mBk+aZuueugCIsICJnaF81MTQ2MTMwYjE3ODkiXSwKICAgICJNemt5TWpZeE56UTJOQT09IjogWyLkuZ3ngrnlh4bml7bnnaE554K5IiwgImdoXzQ4ZmRhMmY4OTM2YyJdLAogICAgIk16a3pNVFl5TURVME9RPT0iOiBbIuS4gOe9kOWltuWFlOWFlOWtkCIsICJnaF84ODQxZWM2ZjU5MGEiXSwKICAgICJNemt6TkRZeE9EWTVPQT09IjogWyLmsqHmnInmmJ/mnJ84IiwgImdoXzkxNDNiZjY3NjI0NSJdLAogICAgIk16a3dOell3TkRZeU1RPT0iOiBbIuaWh+WtpueIseWlveiAhTAwNyIsICJnaF9lZWFiYjRkZmViZWQiXSwKfQoKCmNsYXNzIEhIWUQ6CiAgICBkZWYgX19pbml0X18oc2VsZiwgY2cpOgogICAgICAgIHNlbGYuQ29va2llID0gY2dbIkNvb2tpZSJdCiAgICAgICAgc2VsZi50eGJ6ID0gY2dbInR4YnoiXQogICAgICAgIHNlbGYudG9waWNJZHMgPSBjZ1sidG9waWNJZHMiXQogICAgICAgIHNlbGYuYXBwVG9rZW4gPSBjZ1siYXBwVG9rZW4iXQogICAgICAgIGdsb2JhbCB3ZWNoYXRCdXNzaW5lc3NLZXkKICAgICAgICBzZWxmLndlY2hhdEJ1c3NpbmVzc0tleSA9IHdlY2hhdEJ1c3NpbmVzc0tleSBvciAiIgogICAgICAgIHNlbGYuYWxpQWNjb3VudCA9IGNnWyJhbGlBY2NvdW50Il0gb3IgIiIKICAgICAgICBzZWxmLmFsaU5hbWUgPSBjZ1siYWxpTmFtZSJdIG9yICIiCiAgICAgICAgc2VsZi5uYW1lID0gY2dbIm5hbWUiXQogICAgICAgIHNlbGYuZG9tbmFpbkhvc3QgPSAiMTY5ODg1NTEzOS5oeGlvbmcudG9wIgogICAgICAgIHNlbGYucmVxdWVzdF9pZCA9ICIiCiAgICAgICAgc2VsZi5oZWFkZXJzID0gewogICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQsICovKjsgcT0wLjAxIiwKICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA2MjEpIFhXRUIvODM1MSBGbHVlIiwKICAgICAgICAgICAgIlgtUmVxdWVzdGVkLVdpdGgiOiAiWE1MSHR0cFJlcXVlc3QiLAogICAgICAgICAgICAiUmVmZXJlciI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS8iLAogICAgICAgICAgICAiT3JpZ2luIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgIyAiSG9zdCI6IGYie3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aCIsCiAgICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IiwKICAgICAgICAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgIH0KICAgICAgICBzZWxmLmxhc3RiaXogPSAiIgogICAgICAgIHNlbGYucmVhZEp1bXBQYXRoID0gIiIKICAgICAgICBzZWxmLnJldHJ5UmVhZGluZyA9IEZhbHNlCiAgICAgICAgc2VsZi5yZW1haW5fZ29sZCA9IDAKICAgICAgICBzZWxmLnJlbWFpbiA9IDAKICAgICAgICBzZWxmLnJlYWRBcGlWZXJzaW9uID0gIjguMCIKICAgICAgICBzZWxmLmFkZEdvbGRQYXRoID0gIiIKICAgICAgICBzZWxmLmdldFJlYWRVcmxQYXRoID0gIiIKCiAgICBkZWYgdXNlcl9pbmZvKHNlbGYpOgogICAgICAgIHUgPSBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0vaGFvYmFvYmFvL3VzZXIiCiAgICAgICAgciA9ICIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KCJHRVQiLCB1LCBoZWFkZXJzPXNlbGYuaGVhZGVycykKICAgICAgICAgICAgcmogPSByLmpzb24oKQogICAgICAgICAgICBpZiByai5nZXQoImVycmNvZGUiKSA9PSAwOgogICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W5L+h5oGv5oiQ5Yqf77yM55So5oi3SUTkuLoge3IuanNvbigpWydkYXRhJ11bJ3VzZXJpZCddfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W55So5oi35L+h5oGv5aSx6LSl77yM6LSm5Y+35byC5bi4IOaIluiAhSBDb29raWXml6DmlYjvvIzor7fmo4DmtYtDb29raWXmmK/lkKbmraPnoa4iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwcmludChyLnRleHQpCiAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlueUqOaIt+S/oeaBr+Wksei0pSxDb29raWXml6DmlYjvvIzor7fmo4DmtYtDb29raWXmmK/lkKbmraPnoa4iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgZ29sZChzZWxmKToKICAgICAgICByID0gIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHUgPSBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0vaGFvYmFvYmFvL3dvcmtpbmZvIgogICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KCJHRVQiLCB1LCBoZWFkZXJzPXNlbGYuaGVhZGVycykKICAgICAgICAgICAgIyBwcmludChyLmpzb24oKSkKICAgICAgICAgICAgcmogPSByLmpzb24oKQogICAgICAgICAgICBzZWxmLnJlbWFpbl9nb2xkID0gbWF0aC5mbG9vcihpbnQocmouZ2V0KCJkYXRhIikuZ2V0KCJyZW1haW5fZ29sZCIpKSkKICAgICAgICAgICAgc2VsZi5yZW1haW4gPSBmbG9hdChyai5nZXQoImRhdGEiKS5nZXQoInJlbWFpbiIpKQogICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgIGYn5LuK5pel5bey57uP6ZiF6K+75LqGe3JqLmdldCgiZGF0YSIpLmdldCgiZGF5cmVhZHMiKX3nr4fmlofnq6Ag5b2T5YmN6YeR5biBe3JqLmdldCgiZGF0YSIpLmdldCgicmVtYWluX2dvbGQiKX0g5b2T5YmN5L2Z6aKde3NlbGYucmVtYWlufScKICAgICAgICAgICAgKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W6YeR5biB5aSx6LSlIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIGdldEtleShzZWxmKToKICAgICAgICB1ayA9ICIiCiAgICAgICAgdWtSZXMgPSBOb25lCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMTApOgogICAgICAgICAgICB1ID0gZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9e3NlbGYucmVhZEp1bXBQYXRofSIKICAgICAgICAgICAgIyBwcmludCgi5o+Q56S6IGdldEtlee+8miIsIHUpCiAgICAgICAgICAgIHAgPSBmIiIKICAgICAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgiUE9TVCIsIHUsIGhlYWRlcnM9c2VsZi5oZWFkZXJzLCBkYXRhPXAsIHZlcmlmeT1GYWxzZSkKICAgICAgICAgICAgIyBwcmludCgiZ2V0S2V577yaIiwgci50ZXh0KQogICAgICAgICAgICByaiA9IHIuanNvbigpCiAgICAgICAgICAgIGRvbWFpbiA9IHJqLmdldCgiZGF0YSIpLmdldCgiZG9tYWluIikKICAgICAgICAgICAgIyBwcmludCgi6K+35rGC5Lit6L2s6aG177yaIiwgci50ZXh0KQogICAgICAgICAgICBwcCA9IHBhcnNlX3FzKHVybHBhcnNlKGRvbWFpbikucXVlcnkpCiAgICAgICAgICAgIGhuID0gdXJscGFyc2UoZG9tYWluKS5uZXRsb2MKICAgICAgICAgICAgdWsgPSBwcC5nZXQoInVrIilbMF0KICAgICAgICAgICAgdWtSZXMgPSByLnRleHQKICAgICAgICAgICAgaWYgdWs6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGlmIHVrID09ICIiOgogICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3ojrflj5Z1a+Wksei0pe+8jOi/lOWbnumUmeivr++8mnt1a1Jlc30iKQogICAgICAgICAgICByZXR1cm4KICAgICAgICB0aW1lLnNsZWVwKDAuNSkKICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAiR0VUIiwKICAgICAgICAgICAgZG9tYWluLAogICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSwgYnIiLAogICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgICAgICJIb3N0IjogZiJ7aG59IiwKICAgICAgICAgICAgICAgICJTZWMtRmV0Y2gtRGVzdCI6ICJkb2N1bWVudCIsCiAgICAgICAgICAgICAgICAiU2VjLUZldGNoLU1vZGUiOiAibmF2aWdhdGUiLAogICAgICAgICAgICAgICAgIlNlYy1GZXRjaC1TaXRlIjogIm5vbmUiLAogICAgICAgICAgICAgICAgIlNlYy1GZXRjaC1Vc2VyIjogIj8xIiwKICAgICAgICAgICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIjogIjEiLAogICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA3MWQpIFhXRUIvODQ2MSBGbHVlIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICkKICAgICAgICAjIDxzY3JpcHQgc3JjPSJodHRwczovL2ltYWdlLmh6eXNteXkuY24veXVuc2FvbWEvbmV3cHJvamVjdC9qcy9hcnRpY2xlLmpzP3Y0LjAiPjwvc2NyaXB0PgogICAgICAgIHJlYWRKc1ZlcnNpb24gPSBleHRyYWN0X21pZGRsZV90ZXh0KHIudGV4dCwgImpzL2FydGljbGUuanM/IiwgJyInKQogICAgICAgIGlmIHJlYWRKc1ZlcnNpb246CiAgICAgICAgICAgIGNoZWNrSnNDb2RlQ2hhbmdlZCA9ICgKICAgICAgICAgICAgICAgIGNoZWNrX2ZpbGVfbWQ1KAogICAgICAgICAgICAgICAgICAgIGV4dHJhY3RfbWlkZGxlX3RleHQoci50ZXh0LCAnPHNjcmlwdCBzcmM9IicsICciPjwvc2NyaXAnKSwKICAgICAgICAgICAgICAgICAgICAiMDY3NDI5OTY3NGMyYzU0ZTRjOWM4MTExMDEyNTUyYTciLAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgPT0gRmFsc2UKICAgICAgICAgICAgKQogICAgICAgICAgICBpZiAocmVhZEpzVmVyc2lvbiAhPSAidjExLjAiKSBvciBjaGVja0pzQ29kZUNoYW5nZWQ6CiAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV0g5qOA5rWL5Yiw5o6l5Y+j54mI5pys5Y+R55Sf5Y+Y5YyW77yM5b2T5YmN5o6l5Y+j54mI5pys5Li677yae3JlYWRKc1ZlcnNpb25977yM5ouJ5ZON6K2m5oql77yM5Y+w5a2Q5pCe5LqL77yM6KaB5oqT5Lq65LqG77yM5byA5aeL5pKk6YCA77yM6YCA5Ye656iL5bqPID4+ICIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHN5cy5leGl0KDApCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDpmIXor7vlh4blpIflrozmiJDvvJp7dWt977yM5o+Q5Y+W5Yiw55qE5Zyw5Z2A77yae2RvbWFpbn0iKQogICAgICAgICAgICAgICAgaWYgbXlra3lkUmVhZFB1cmVMb2cgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDpmIXor7vlh4blpIfmiJDlip/vvIzlvZPliY3mjqXlj6PniYjmnKzkuLrvvJp7cmVhZEpzVmVyc2lvbn0g5Y2z5bCG5byA5aeL6ZiF6K+7IOKchSDvvIzpmIXor7vlj4LmlbDkuLrvvJp7dWt9IgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXNUZXh0ID0gdHJpbVNwYWNlQ2hhcmFjdGVycyhyLnRleHQpCiAgICAgICAgICAgIGdldFJlYWRVcmxTdHIgPSBleHRyYWN0X21pZGRsZV90ZXh0KAogICAgICAgICAgICAgICAgcmVzVGV4dCwKICAgICAgICAgICAgICAgIHRyaW1TcGFjZUNoYXJhY3RlcnMoImZ1bmN0aW9uIHJlYWRfanVtcF9yZWFkKCkgeyIpLAogICAgICAgICAgICAgICAgdHJpbVNwYWNlQ2hhcmFjdGVycygKICAgICAgICAgICAgICAgICAgICAibG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2FydF9zdGFydF90aW1lJywgYXJ0X3N0YXJ0X3RpbWUpOyIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICkKICAgICAgICAgICAgc2VsZi5nZXRSZWFkVXJsUGF0aCA9IGV4dHJhY3RfbWlkZGxlX3RleHQoCiAgICAgICAgICAgICAgICBnZXRSZWFkVXJsU3RyLAogICAgICAgICAgICAgICAgdHJpbVNwYWNlQ2hhcmFjdGVycygndXJsOiBkb21haW4rIi8nKSwKICAgICAgICAgICAgICAgIHRyaW1TcGFjZUNoYXJhY3RlcnMoIj90aW1lPSIpLAogICAgICAgICAgICApCiAgICAgICAgICAgIGFkZEdvbGRTdHIgPSBleHRyYWN0X21pZGRsZV90ZXh0KAogICAgICAgICAgICAgICAgcmVzVGV4dCwKICAgICAgICAgICAgICAgIHRyaW1TcGFjZUNoYXJhY3RlcnMoImZ1bmN0aW9uIGdldEdvbGQodGltZSkgeyIpLAogICAgICAgICAgICAgICAgdHJpbVNwYWNlQ2hhcmFjdGVycygnJCgiLmdvbGROdW0iKS5odG1sKHJlcy5kYXRhLmdvbGQpOycpLAogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbGYuYWRkR29sZFBhdGggPSBleHRyYWN0X21pZGRsZV90ZXh0KAogICAgICAgICAgICAgICAgYWRkR29sZFN0ciwKICAgICAgICAgICAgICAgIHRyaW1TcGFjZUNoYXJhY3RlcnMoJ3VybDogZG9tYWluKyIvJyksCiAgICAgICAgICAgICAgICB0cmltU3BhY2VDaGFyYWN0ZXJzKCI/dGltZT0iKSwKICAgICAgICAgICAgKQogICAgICAgICAgICAjIGh0dHA6Ly8wZjJiYjFiNjUwLnQxNzEzNTE1MjI5cy56YWNoLWlvdC5vbmxpbmUveWQyLmh0bWw/dWs9ZTRiZDE0M2MzZTI1NzJkYTgwYzJkZmQ2ZTEzZTdhNzgmdD0xNzEzNTE1MjU2CiAgICAgICAgICAgIHJlYWRBcGlWZXJzaW9uID0gZXh0cmFjdF9taWRkbGVfdGV4dCgKICAgICAgICAgICAgICAgIHJlc1RleHQsCiAgICAgICAgICAgICAgICB0cmltU3BhY2VDaGFyYWN0ZXJzKAogICAgICAgICAgICAgICAgICAgIGYndXJsOiBkb21haW4rIi97c2VsZi5nZXRSZWFkVXJsUGF0aH0/dGltZT0iKyB0aW1lICsiJm15c2lnbj0xNjgmdnM9JwogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIHRyaW1TcGFjZUNoYXJhY3RlcnMoJyZ1az0iKyB1aywnKSwKICAgICAgICAgICAgKQogICAgICAgICAgICBpZiByZWFkQXBpVmVyc2lvbjoKICAgICAgICAgICAgICAgIHNlbGYucmVhZEFwaVZlcnNpb24gPSByZWFkQXBpVmVyc2lvbgogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICB0cmltU3BhY2VDaGFyYWN0ZXJzKAogICAgICAgICAgICAgICAgICAgIGYndXJsOiBkb21haW4rIi97c2VsZi5nZXRSZWFkVXJsUGF0aH0/dGltZT0iKyB0aW1lICsiJm15c2lnbj0xNjgmdnM9e3NlbGYucmVhZEFwaVZlcnNpb259JnVrPSIrIHVrLCcKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGluIHJlc1RleHQKICAgICAgICAgICAgICAgIGFuZCB0cmltU3BhY2VDaGFyYWN0ZXJzKAogICAgICAgICAgICAgICAgICAgIGYndXJsOiBkb21haW4rIi97c2VsZi5hZGRHb2xkUGF0aH0/dGltZT0iK3RpbWUrIiZwc2lnbj0iK3BzaWduKyImdWs9Iit1aywnCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBpbiByZXNUZXh0CiAgICAgICAgICAgICAgICAjIGFuZCBjaGVja19zdHJfbWQ1KAogICAgICAgICAgICAgICAgIyAgICAgZXh0cmFjdF9taWRkbGVfdGV4dCgKICAgICAgICAgICAgICAgICMgICAgICAgICByZXNUZXh0LCAnPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPicsICI8L3NjcmlwdD4iCiAgICAgICAgICAgICAgICAjICAgICApLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAjICAgICAgICAgZid1cmw6IGRvbWFpbisiL3dlbnpqa3M/dGltZT0iKyB0aW1lICsiJm15c2lnbj0xNjgmdnM9OC4wJnVrPSIrIHVrLCcsCiAgICAgICAgICAgICAgICAjICAgICAgICAgZid1cmw6IGRvbWFpbisiL3dlbnpqa3M/dGltZT0iKyB0aW1lICsiJm15c2lnbj0xNjgmdnM9e3NlbGYucmVhZEFwaVZlcnNpb259JnVrPSIrIHVrLCcsCiAgICAgICAgICAgICAgICAjICAgICApLAogICAgICAgICAgICAgICAgIyAgICAgImYzNGFiM2RkMmQzOGE4MmJhYmEzYWMwYTU0OTQwN2Q5IiwKICAgICAgICAgICAgICAgICMgKQogICAgICAgICAgICApOgogICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+WHhuWkh+WujOaIkO+8jOW9k+WJjSDliqDlr4bku6PnoIFoYXNo5YC8IOS4jiDpooTorr7lgLzkuIDoh7TvvIzliqDlr4blhoXlrrnmnKrkv67mlLnvvIzlj6/nu6fnu63pmIXor7sg4pyFICIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g5qOA5rWL5Yiw5Yqg5a+G5Luj56CB5YaF5a655Y+R55Sf5Y+Y5YyW77yM5ouJ5ZON6K2m5oql77yM5Y+w5a2Q5pCe5LqL77yM6KaB5oqT5Lq65LqG77yM5byA5aeL5pKk6YCA77yM6YCA5Ye656iL5bqPID4+ICIpCiAgICAgICAgICAgICAgICBvcy5fZXhpdCgwKQogICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICBoID0gewogICAgICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUsIGJyIiwKICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICJDb25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAiSG9zdCI6IGhuLAogICAgICAgICAgICAiT3JpZ2luIjogZiJodHRwczovL3tobn0iLAogICAgICAgICAgICAiU2VjLUZldGNoLURlc3QiOiAiZW1wdHkiLAogICAgICAgICAgICAiU2VjLUZldGNoLU1vZGUiOiAiY29ycyIsCiAgICAgICAgICAgICJTZWMtRmV0Y2gtU2l0ZSI6ICJjcm9zcy1zaXRlIiwKICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA3MWQpIFhXRUIvODQ2MSBGbHVlIiwKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVrLCBoCgogICAgZGVmIHJlYWQoc2VsZik6CiAgICAgICAgaW5mbyA9IHNlbGYuZ2V0S2V5KCkKICAgICAgICBpZiBsZW4oaW5mbykgPT0gMDoKICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W6ZiF6K+75Y+C5pWw5aSx6LSl77yM5YGc5q2i5b6A5ZCO6ZiF6K+777yB4pqg77iPICIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgICMgcHJpbnQoaW5mbykKICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgYXJjdGlsZVRpbWUgPSAxCiAgICAgICAgc2VsZi5yZXRyeVJlYWRpbmcgPSBGYWxzZQogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHJlcyA9IHsiZXJyY29kZSI6IC0xfQogICAgICAgICAgICAjIHJhd1JlcyA9ICIiCiAgICAgICAgICAgIHJlZnJlc2hUaW1lID0gMAogICAgICAgICAgICB3aGlsZSByZXNbImVycmNvZGUiXSAhPSAwOgogICAgICAgICAgICAgICAgc2VsZi5yZXRyeVJlYWRpbmcgPSBGYWxzZQogICAgICAgICAgICAgICAgdGltZVN0YW1wID0gc3RyKHRzKCkpCiAgICAgICAgICAgICAgICBteXNpZ24gPSBoYXNobGliLm1kNSgKICAgICAgICAgICAgICAgICAgICAoaW5mb1sxXVsiSG9zdCJdICsgdGltZVN0YW1wICsgIkxqKj9RMyNwT3ZpVyIpLmVuY29kZSgpCiAgICAgICAgICAgICAgICApLmhleGRpZ2VzdCgpCiAgICAgICAgICAgICAgICBzZWxmLnBhcmFtcyA9IHsKICAgICAgICAgICAgICAgICAgICAidGltZSI6IHRpbWVTdGFtcCwKICAgICAgICAgICAgICAgICAgICAibXlzaWduIjogIjE2OCIsCiAgICAgICAgICAgICAgICAgICAgInZzIjogc2VsZi5yZWFkQXBpVmVyc2lvbiwKICAgICAgICAgICAgICAgICAgICAidWsiOiBpbmZvWzBdLAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdSA9IGYiaHR0cDovL3tpbmZvWzFdWydIb3N0J119L3tzZWxmLmdldFJlYWRVcmxQYXRofSIKICAgICAgICAgICAgICAgICMgcHJpbnQoCiAgICAgICAgICAgICAgICAjICAgICAi6ZiF6K+75paH56ug5Y+C5pWw5p+l55yL77yaIiwKICAgICAgICAgICAgICAgICMgICAgIHUsCiAgICAgICAgICAgICAgICAjICAgICBzZWxmLnBhcmFtcywKICAgICAgICAgICAgICAgICMgICAgIGluZm8sCiAgICAgICAgICAgICAgICAjICAgICBpbmZvWzFdWyJPcmlnaW4iXS5yZXBsYWNlKCJodHRwczovLyIsICIiKS5yZXBsYWNlKCIvIiwgIiIpLAogICAgICAgICAgICAgICAgIyApCiAgICAgICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICJHRVQiLAogICAgICAgICAgICAgICAgICAgIHUsCiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz1pbmZvWzFdLAogICAgICAgICAgICAgICAgICAgIHBhcmFtcz1zZWxmLnBhcmFtcywKICAgICAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICAgICAgICAgdGltZW91dD02MCwKICAgICAgICAgICAgICAgICAgICBwcm94aWVzPXByb3hpZXMsCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBwcmludCgiLSIgKiA1MCkKICAgICAgICAgICAgICAgICMgaWYgbXlra3lkUmVhZFB1cmVMb2cgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAjICAgICBwcmludCgKICAgICAgICAgICAgICAgICMgICAgZiLotKblj7dbe3NlbGYubmFtZX1d56ysW3tyZWZyZXNoVGltZSsxfV3mrKHojrflj5bpmIXor7vmlofnq6Bbe2luZm9bMF19XeebrueahOmhte+8mntyLnRleHR9IgogICAgICAgICAgICAgICAgIyApCiAgICAgICAgICAgICAgICAjIHJhd1JlcyA9IHIudGV4dAogICAgICAgICAgICAgICAgIyBwcmludCgi6I635Y+W5paH56ug6ZiF6K+76ZO+5o6l77yaIiwgci50ZXh0KQogICAgICAgICAgICAgICAgaWYgci50ZXh0ID09ICIiOgogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV3nrKxbe3JlZnJlc2hUaW1lKzF9XeasoeiOt+WPlumYheivu+aWh+eroFt7aW5mb1swXX1d55uu55qE6aG15aSx6LSl77yM6K+35qOA5p+l572R57uc5oiW56iN5ZCO5YaN6K+VIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIGlmIHIudGV4dCBhbmQgci5qc29uKClbImVycmNvZGUiXSA9PSAwOgogICAgICAgICAgICAgICAgICAgIHJlcyA9IHIuanNvbigpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeesrFt7cmVmcmVzaFRpbWUrMX1d5qyh6I635Y+W56ysW3thcmN0aWxlVGltZX1d56+H6ZiF6K+75paH56ugW3tpbmZvWzBdfV3ot7Povazpk77mjqXmiJDlip8iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBkZWNvZGVkX3N0ciA9IGpzb24ubG9hZHMoci50ZXh0KQogICAgICAgICAgICAgICAgICAgIGlmIGRlY29kZWRfc3RyWyJtc2ciXToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV3nrKxbe3JlZnJlc2hUaW1lKzF9XeasoeiOt+WPluesrFt7YXJjdGlsZVRpbWV9Xeevh+mYheivu+aWh+eroFt7aW5mb1swXX1d6Lez6L2s6ZO+5o6l5aSx6LSl77yae2RlY29kZWRfc3RyWydtc2cnXX0iCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV3nrKxbe3JlZnJlc2hUaW1lKzF9XeasoeiOt+WPluesrFt7YXJjdGlsZVRpbWV9Xeevh+mYheivu+aWh+eroFt7aW5mb1swXX1d6Lez6L2s6ZO+5o6l5aSx6LSl77yae3IudGV4dH0iCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMS41KQogICAgICAgICAgICAgICAgcmVmcmVzaFRpbWUgPSByZWZyZXNoVGltZSArIDEKICAgICAgICAgICAgICAgIGlmIHJlZnJlc2hUaW1lID49IDU6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlumYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d6LaF5pe24oCm4oCmIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgd2VjaGF0UG9zdExpbmsgPSAiIgogICAgICAgICAgICBwcmludCgi6I635Y+W5paH56ug5pWw5o2u77yaIiwgcmVzKQogICAgICAgICAgICBpZiByZXMuZ2V0KCJlcnJjb2RlIikgPT0gMDoKICAgICAgICAgICAgICAgIHJldHVybkxpbmsgPSAiIgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHJldHVybkxpbmsgPSByZXMuZ2V0KCJkYXRhIikuZ2V0KCJsaW5rIikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBlcnJvck1zZyA9IHJlcy5nZXQoImRhdGEiKQogICAgICAgICAgICAgICAgICAgICMgcHJpbnQoIjHmiqXplJnvvJoiLCBlKQogICAgICAgICAgICAgICAgICAgICMgcHJpbnQoIjHov5Tlm57vvJoiLCByYXdSZXMpCiAgICAgICAgICAgICAgICAgICAgaWYgIjQwNCBOb3QgRm91bmQiIGluIGVycm9yTXNnOgogICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1zZyA9ICLlj7DlrZDmjqXlj6PkuI3ooYzvvIzltKnkuoZ+IgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJldHJ5UmVhZGluZyA9IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1d6I635Y+W6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3pk77mjqXlpLHotKXvvIznlpHkvLzlj7DlrZDmjqXlj6PlpKrlnoPlnL7vvIzltKnkuobvvIzov5Tlm57mlbDmja7kuLrvvJoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2csCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlumYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d6ZO+5o6l5aSx6LSl77yM55aR5Ly85Y+w5a2Q5o6l5Y+j5aSq5Z6D5Zy+77yM5bSp5LqG77yM6L+U5Zue5pWw5o2u5Li677yaIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2csCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICBpZiAibXAud2VpeGluLnFxLmNvbSIgaW4gcmV0dXJuTGluazoKICAgICAgICAgICAgICAgICAgICBpZiBteWtreWRSZWFkUHVyZUxvZyA9PSBGYWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+W+ruS/oeaWh+eroO+8mntyZXR1cm5MaW5rfSIpCiAgICAgICAgICAgICAgICAgICAgd2VjaGF0UG9zdExpbmsgPSByZXR1cm5MaW5rCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroOWHhuWkh+i3s+i9rO+8mntsaW5rfSIpCiAgICAgICAgICAgICAgICAgICAgd2VjaGF0UG9zdExpbmsgPSBzZWxmLmp1bXAocmV0dXJuTGluaykKICAgICAgICAgICAgICAgICAgICBpZiBteWtreWRSZWFkUHVyZUxvZyA9PSBGYWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5b6u5L+h5paH56ug77yae3dlY2hhdFBvc3RMaW5rfSIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgaWYgbXlra3lkUmVhZFB1cmVMb2cgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroO+8mnt3ZWNoYXRQb3N0TGlua30iKQogICAgICAgICAgICAgICAgcG9zdEluZm8gPSBnZXRpbmZvKHdlY2hhdFBvc3RMaW5rKQogICAgICAgICAgICAgICAgaWYgcG9zdEluZm8gPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3lm6Ag6I635Y+W5YWs5LyX5Y+35paH56ug5L+h5oGv5LiN5oiQ5Yqf77yM5a+86Ie06ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV0g5aSx6LSl4oCm4oCmIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIHNsZWVwVGltZSA9IHJhbmRvbS5yYW5kaW50KDcsIDEwKQogICAgICAgICAgICAgICAgIyDlpoLmnpzmmK/mo4DmtYvnibnlvoHliLDnmoTmlofnq6Ag5oiW6ICFIOWQjuS4gOevh+aWh+eroOS4juWJjeS4gOevh+ebuOS8vAogICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgIGNoZWNrRGljdC5nZXQocG9zdEluZm9bNF0pICE9IE5vbmUKICAgICAgICAgICAgICAgICAgICAjIG9yICgiJmlkeD0xIiBub3QgaW4gd2VjaGF0UG9zdExpbmspCiAgICAgICAgICAgICAgICAgICAgb3IgKCImaWR4PTciIGluIHdlY2hhdFBvc3RMaW5rKQogICAgICAgICAgICAgICAgICAgIG9yICgiJmlkeD01IiBpbiB3ZWNoYXRQb3N0TGluaykKICAgICAgICAgICAgICAgICAgICBvciAocmVzLmdldCgiZGF0YSIpLmdldCgiYSIpID09IDIpCiAgICAgICAgICAgICAgICAgICAgb3IgKCImY2hrc209IiBpbiB3ZWNoYXRQb3N0TGluaykKICAgICAgICAgICAgICAgICk6CiAgICAgICAgICAgICAgICAgICAgc2xlZXBUaW1lID0gcmVhZFBvc3REZWxheSBvciByYW5kb20ucmFuZGludCgxNSwgMjApCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3pmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XSDmo4DmtYvliLDnlpHkvLzmo4DmtYvmlofnq6DvvIzmraPlnKjmjqjpgIHvvIznrYnlvoXov4fmo4DmtYvvvIznrYnlvoXml7bpl7TvvJp7c2xlZXBUaW1lfeenkuOAguOAguOAgiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsIGxpbmtfY2FjaGUKICAgICAgICAgICAgICAgICAgICBmZXRjaF93eF90aW1lX2FuZF9yZWNvcmQod2VjaGF0UG9zdExpbmssIGxpbmtfY2FjaGUpCiAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi53ZWNoYXRCdXNzaW5lc3NLZXk6CiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hXZWNoYXRCdXNzaW5lc3Moc2VsZi53ZWNoYXRCdXNzaW5lc3NLZXksIHdlY2hhdFBvc3RMaW5rKQogICAgICAgICAgICAgICAgICAgIGVsaWYgc2VsZi5hcHBUb2tlbjoKICAgICAgICAgICAgICAgICAgICAgICAgcHVzaCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXBwVG9rZW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRvcGljSWRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIueMq+eMq+eci+eci+mYheivu+i/h+ajgOa1iyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWNoYXRQb3N0TGluaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1dIOato+WcqOetieW+hei/h+ajgOa1i++8jOetieW+heaXtumXtO+8mntzbGVlcFRpbWV956eSXG7lubvnlJ/mj5DnpLrvvJrlv6vngrnvvIzliKvogL3mkIHml7bpl7TkuobvvIEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm15a2t5ZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3pmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XSDpnIDopoHov4fmo4DmtYvvvIzkvYbmmK/mnKrphY3nva7mjqjpgIF0b2tlbu+8jOS4uuS6humBv+WFjem7keWPt++8jOWBnOatoumYheivu+OAguOAguOAgiIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi4pyFIOi0puWPt1t7c2VsZi5uYW1lfV3pmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XSDpnZ7mo4DmtYvmlofnq6DvvIzmqKHmi5/or7t7c2xlZXBUaW1lfeenkiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBzZWxmLmxhc3RiaXogPSBwb3N0SW5mb1s0XQogICAgICAgICAgICAgICAgdGltZS5zbGVlcChzbGVlcFRpbWUpCiAgICAgICAgICAgICAgICB1MSA9IGYiaHR0cDovL3tpbmZvWzFdWydIb3N0J119L3tzZWxmLmFkZEdvbGRQYXRofT90aW1lPXtzbGVlcFRpbWV9JnBzaWduPXtyYW5kb20ucmFuZGludCgxLCAxMDAwKX0mdWs9e2luZm9bMF19IgogICAgICAgICAgICAgICAgcjEgPSBzYWZlX3JlcXVlc3QoIkdFVCIsIHUxLCBoZWFkZXJzPWluZm9bMV0sIHZlcmlmeT1GYWxzZSkKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAjIHByaW50KCLlop7liqDph5HluIHvvJoiLCB1MSwgaW5mb1sxXSwgcjEudGV4dCkKICAgICAgICAgICAgICAgICAgICBpZiByMS50ZXh0IGFuZCByMS5qc29uKCk6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4pyFIOi0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3miYDlvpfph5HluIHvvJp7cjEuanNvbigpWydkYXRhJ11bJ2dvbGQnXX3kuKrvvIzotKbmiLflvZPliY3ph5HluIHvvJp7cjEuanNvbigpWydkYXRhJ11bJ2xhc3RfZ29sZCddfeS4qu+8jOS7iuaXpeW3suivu++8mntyMS5qc29uKClbJ2RhdGEnXVsnZGF5X3JlYWQnXX3mrKHvvIzku4rml6XmnKror7sge3IxLmpzb24oKVsnZGF0YSddWydyZW1haW5fcmVhZCddfeevh+aWh+eroCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLinYwg6LSm5Y+3W3tzZWxmLm5hbWV9XSDpmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XeW8guW4uO+8mntyMS5qc29uKCkuZ2V0KCdtc2cnKX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAi5pys5qyh6ZiF6K+75peg5pWIIiBpbiByMS5qc29uKCkuZ2V0KCJtc2ciKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLinYwg6LSm5Y+3W3tzZWxmLm5hbWV9XSDpmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XeWksei0pe+8mntyMS50ZXh0fSIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICMgcHJpbnQoIjLmiqXplJnvvJoiLCBlKQogICAgICAgICAgICAgICAgICAgICMgcHJpbnQoIjLov5Tlm57vvJoiLCByMS50ZXh0KQogICAgICAgICAgICAgICAgICAgIGVycm9yTXNnID0gcjEudGV4dAogICAgICAgICAgICAgICAgICAgIGlmICI0MDQgTm90IEZvdW5kIiBpbiBlcnJvck1zZzoKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2cgPSAi5Y+w5a2Q5o6l5Y+j5LiN6KGM77yM5bSp5LqGfiIKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZXRyeVJlYWRpbmcgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XSDpmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XeW8guW4uO+8jOi/lOWbnuaVsOaNruS4uu+8miIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1zZywKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d5byC5bi477yM6L+U5Zue5pWw5o2u5Li677yaIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2csCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGVsaWYgcmVzLmdldCgiZXJyY29kZSIpID09IDQwNToKICAgICAgICAgICAgICAgIHByaW50KGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3pmIXor7vph43lpI0iKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxLjUpCiAgICAgICAgICAgIGVsaWYgcmVzLmdldCgiZXJyY29kZSIpID09IDQwNzoKICAgICAgICAgICAgICAgIHByaW50KGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3pmIXor7vnu5PmnZ8iKQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3mnKrnn6Xmg4XlhrUiKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxLjUpCiAgICAgICAgICAgIGFyY3RpbGVUaW1lID0gYXJjdGlsZVRpbWUgKyAxCgogICAgZGVmIGp1bXAoc2VsZiwgbGluayk6CiAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5byA5aeL5pys5qyh6ZiF6K+74oCm4oCmIikKICAgICAgICBobiA9IHVybHBhcnNlKGxpbmspLm5ldGxvYwogICAgICAgIGggPSB7CiAgICAgICAgICAgICJIb3N0IjogaG4sCiAgICAgICAgICAgICJDb25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAiVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0cyI6ICIxIiwKICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA2MjEpIFhXRUIvODM1MSBGbHVlIiwKICAgICAgICAgICAgIkFjY2VwdCI6ICJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLAogICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoIiwKICAgICAgICAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgIH0KICAgICAgICByID0gc2FmZV9yZXF1ZXN0KCJHRVQiLCBsaW5rLCBoZWFkZXJzPWgsIGFsbG93X3JlZGlyZWN0cz1GYWxzZSwgdmVyaWZ5PUZhbHNlKQogICAgICAgICMgcHJpbnQoci5zdGF0dXNfY29kZSkKICAgICAgICBMb2NhdGlvbiA9IHIuaGVhZGVycy5nZXQoIkxvY2F0aW9uIikKICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3lvIDlp4vpmIXor7vmlofnq6AgLSB7TG9jYXRpb259IikKICAgICAgICByZXR1cm4gTG9jYXRpb24KCiAgICBkZWYgd2l0aGRyYXdQb3N0KHNlbGYpOgogICAgICAgIHUgPSBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0vaGFvYmFvYmFvL2dldHdpdGhkcmF3IgogICAgICAgIHAgPSBmInNpZ25pZD17c2VsZi5yZXF1ZXN0X2lkfSZ1YT0wJnB0eXBlPTAmcGFjY291bnQ9JnBuYW1lPSIKICAgICAgICBpZiBzZWxmLmFsaUFjY291bnQgYW5kIHNlbGYuYWxpTmFtZToKICAgICAgICAgICAgcCA9IGYic2lnbmlkPXtzZWxmLnJlcXVlc3RfaWR9JnVhPTImcHR5cGU9MSZwYWNjb3VudD17cXVvdGUoc2VsZi5hbGlBY2NvdW50KX0mcG5hbWU9e3F1b3RlKHNlbGYuYWxpTmFtZSl9IgogICAgICAgIHIgPSBzYWZlX3JlcXVlc3QoCiAgICAgICAgICAgICJQT1NUIiwKICAgICAgICAgICAgdSwKICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLAogICAgICAgICAgICAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgICAgICAgICAgIkhvc3QiOiBmIntzZWxmLmRvbW5haW5Ib3N0fSIsCiAgICAgICAgICAgICAgICAiT3JpZ2luIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgICAgICJQcm94eS1Db25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAgICAgIlJlZmVyZXIiOiBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0vaGFvYmFvYmFvL3dpdGhkcmF3IiwKICAgICAgICAgICAgICAgICJYLVJlcXVlc3RlZC1XaXRoIjogIlhNTEh0dHBSZXF1ZXN0IiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGF0YT1wLAogICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgKQogICAgICAgIHByaW50KGYi4pyFIOi0puWPt1t7c2VsZi5uYW1lfV0g5o+Q546w57uT5p6c77yaIiwgci5qc29uKClbIm1zZyJdKQoKICAgIGRlZiB3aXRoZHJhdyhzZWxmKToKICAgICAgICBnb2xkID0gaW50KGludChzZWxmLnJlbWFpbl9nb2xkKSAvIDEwMDApICogMTAwMAogICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDmnKzmrKHmj5DnjrDph5Hpop0gIiwgc2VsZi5yZW1haW4sICLlhYMgIiwgZ29sZCwgIumHkeW4gSIpCiAgICAgICAgd2l0aGRyYXdCYWxhbmNlID0gcm91bmQoKGludChzZWxmLnR4YnopIC8gMTAwMDApLCAzKQogICAgICAgIGlmIGdvbGQgb3IgKHNlbGYucmVtYWluID49IHdpdGhkcmF3QmFsYW5jZSk6CiAgICAgICAgICAgIGlmIGdvbGQgYW5kICgoZmxvYXQoc2VsZi5yZW1haW4pICsgZ29sZCAvIDEwMDAwKSA8PSAzMCk6CiAgICAgICAgICAgICAgICAjIOW8gOWni+aPkOeOsAogICAgICAgICAgICAgICAgIyDku6XkuIvpgLvovpHmsqHnlKjvvIzkuI3nrqHkvaBnb2xk5Li65aSa5bCR77yM5a6D6YO95piv5YWo6YOo5YWR5o2iCiAgICAgICAgICAgICAgICAjIG1heENhbkV4Y2hhbmdlR29sZCA9ICgyOS45IC0gc2VsZi5yZW1haW4pICogMTAwMDAKICAgICAgICAgICAgICAgICMgaWYgbWF4Q2FuRXhjaGFuZ2VHb2xkID4gMDoKICAgICAgICAgICAgICAgICMgICAgIGdvbGQgPSBtaW4obWF4Q2FuRXhjaGFuZ2VHb2xkLCBnb2xkKQogICAgICAgICAgICAgICAgIyAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOS4uumBv+WFjei2hei/h+S4ieWNgeWdl++8jOacrOasoeWFkeaNoumHkeW4geaVsOS4uiAiLCBnb2xkLCAi6YeR5biBIikKICAgICAgICAgICAgICAgIHUxID0gZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9L2hhb2Jhb2Jhby9nZXRnb2xkIgogICAgICAgICAgICAgICAgcDEgPSBmInJlcXVlc3RfaWQ9e3NlbGYucmVxdWVzdF9pZH0mZ29sZD17Z29sZH0iCiAgICAgICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICJQT1NUIiwKICAgICAgICAgICAgICAgICAgICB1MSwKICAgICAgICAgICAgICAgICAgICBkYXRhPXAxLAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLAogICAgICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgICAgICAgICAgICAgICAgICJIb3N0IjogZiJ7c2VsZi5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAgICAgICAgICAgICAiT3JpZ2luIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgICAgICAgICAgICAgIlByb3h5LUNvbm5lY3Rpb24iOiAia2VlcC1hbGl2ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJSZWZlcmVyIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9L2hhb2Jhb2Jhby93aXRoZHJhdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNzFkKSBYV0VCLzg0NjEgRmx1ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJYLVJlcXVlc3RlZC1XaXRoIjogIlhNTEh0dHBSZXF1ZXN0IiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICByZXMgPSByLmpzb24oKQogICAgICAgICAgICAgICAgICAgIGlmIHJlcy5nZXQoImVycmNvZGUiKSA9PSAwOgogICAgICAgICAgICAgICAgICAgICAgICB3aXRoZHJhd0JhbGFuY2VOdW0gPSBzZWxmLnJlbWFpbiArIGZsb2F0KHJlc1siZGF0YSJdWyJtb25leSJdKQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4pyFIOi0puWPt1t7c2VsZi5uYW1lfV0g6YeR5biB5YWR5o2i5Li6546w6YeR5oiQ5Yqf77yM5byA5aeL5o+Q546w77yM6aKE6K6h5Yiw6LSmIHt3aXRoZHJhd0JhbGFuY2VOdW19IOWFgyA+Pj4gIgogICAgICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgICAgICBpZiB3aXRoZHJhd0JhbGFuY2VOdW0gPCB3aXRoZHJhd0JhbGFuY2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3msqHmnInovr7liLDmj5DnjrDmoIflh4Yge3dpdGhkcmF3QmFsYW5jZX0g5YWDIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLndpdGhkcmF3UG9zdCgpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe3NlbGYubmFtZX1dIOmHkeW4geWFkeaNouS4uueOsOmHkeWksei0pe+8miIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnRleHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIOaPkOeOsOWcsOWdgO+8miIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1MSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIg5o+Q546w5Y+C5pWw77yaIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxLAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgIyByYWlzZSBlCiAgICAgICAgICAgICAgICAgICAgIyDlpITnkIblvILluLgKICAgICAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g5o+Q546w5aSx6LSl77yaIiwgZSkKICAgICAgICAgICAgc2VsZi53aXRoZHJhd1Bvc3QoKQoKICAgIGRlZiBpbml0KHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgKICAgICAgICAgICAgICAgICJHRVQiLAogICAgICAgICAgICAgICAgZ2V0TmV3SW52aXRlVXJsKCksCiAgICAgICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICAgICAiVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0cyI6ICIxIiwKICAgICAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICJDb29raWUiOiBzZWxmLkNvb2tpZSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICAgICAjIOemgeatoumHjeWumuWQkQogICAgICAgICAgICAgICAgYWxsb3dfcmVkaXJlY3RzPUZhbHNlLAogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbGYuZG9tbmFpbkhvc3QgPSByLmhlYWRlcnMuZ2V0KCJMb2NhdGlvbiIpLnNwbGl0KCIvIilbMl0KICAgICAgICAgICAgIyBwcmludChyLnRleHQpCiAgICAgICAgICAgIGlmIG15a2t5ZFJlYWRQdXJlTG9nID09IEZhbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5o+Q5Y+W5Yiw55qE5Z+f5ZCN77yae3NlbGYuZG9tbmFpbkhvc3R9IikKICAgICAgICAgICAgIyBzZWxmLmhlYWRlcnMgPSB7CiAgICAgICAgICAgICMgICAgICJDb25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAjICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAjICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDYyMSkgWFdFQi84MzUxIEZsdWUiLAogICAgICAgICAgICAjICAgICAiWC1SZXF1ZXN0ZWQtV2l0aCI6ICJYTUxIdHRwUmVxdWVzdCIsCiAgICAgICAgICAgICMgICAgICJSZWZlcmVyIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9LyIsCiAgICAgICAgICAgICMgICAgICJPcmlnaW4iOiBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAjICAgICAjICJIb3N0IjogZiJ7c2VsZi5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAjICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAjICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoIiwKICAgICAgICAgICAgIyAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLAogICAgICAgICAgICAjICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgICAgICMgfQogICAgICAgICAgICAjICMg6I635Y+WcmVxdWVzdElkCiAgICAgICAgICAgIHNlbGYucmVhZEp1bXBQYXRoID0gIiIKICAgICAgICAgICAgaWYgbXlra3lkRGV0ZWN0aW5nU2VhbFN0YXR1czoKICAgICAgICAgICAgICAgIHIgPSBzYWZlX3JlcXVlc3QoCiAgICAgICAgICAgICAgICAgICAgIkdFVCIsCiAgICAgICAgICAgICAgICAgICAgZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9L2hhb2Jhb2Jhby9ob21lIiwKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICAgICAgICAgIlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMiOiAiMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNzFkKSBYV0VCLzg0NjEgRmx1ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJDb29raWUiOiBzZWxmLkNvb2tpZSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGh0bWx0ZXh0ID0gci50ZXh0CiAgICAgICAgICAgICAgICByZWFkX2p1bXBfcmVhZF90ZXh0ID0gZXh0cmFjdF9taWRkbGVfdGV4dCgKICAgICAgICAgICAgICAgICAgICBodG1sdGV4dCwgImZ1bmN0aW9uIHJlYWRfanVtcF9yZWFkKCl7IiwgInN1Y2Nlc3M6IGZ1bmN0aW9uIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgaWYgcmVhZF9qdW1wX3JlYWRfdGV4dDoKICAgICAgICAgICAgICAgICAgICByZWFkSnVtcFBhdGggPSBleHRyYWN0X21pZGRsZV90ZXh0KAogICAgICAgICAgICAgICAgICAgICAgICByZWFkX2p1bXBfcmVhZF90ZXh0LCAidXJsOiBkb21haW4rJyIsICInLCIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgaWYgcmVhZEp1bXBQYXRoOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlYWRKdW1wUGF0aCA9IHJlYWRKdW1wUGF0aAogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICLnm7TmjqXmj5AiIG5vdCBpbiBzZWxmLm5hbWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV0g5Yid5aeL5YyW5aSx6LSl77yM6K+35omL5Yqo6K6/6Zeu5LiL56Gu6K6k6aG16Z2i5rKh5bSp5rqDIOaIluiAhSDnqI3lkI7lho3or5XlkKfvvIzkuIDnm7TkuI3ooYzvvIzor7fliY3lvoBUR+e+pOWPjemmiH4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGhpZGRlblRpcFRleHQgPSBleHRyYWN0X21pZGRsZV90ZXh0KAogICAgICAgICAgICAgICAgICAgICAgICBodG1sdGV4dCwgJzwhLS0gPHAgc3R5bGU9ImNvbG9yOnJlZCI+JywgIjxicj4iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICMg56e76Zmk5o6J5rOo6YeK55qE5YWs5ZGK6YOo5YiGCiAgICAgICAgICAgICAgICAgICAgaHRtbHRleHQgPSBodG1sdGV4dC5yZXBsYWNlKAogICAgICAgICAgICAgICAgICAgICAgICAnPCEtLSA8cCBzdHlsZT0iY29sb3I6cmVkIj4nICsgaGlkZGVuVGlwVGV4dCArICI8YnI+IiwgIiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgdGlwVGV4dCA9IGV4dHJhY3RfbWlkZGxlX3RleHQoCiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWx0ZXh0LCAnPHAgc3R5bGU9ImNvbG9yOnJlZCI+JywgIjxicj4iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGlmICLnm7TmjqXmj5AiIG5vdCBpbiBzZWxmLm5hbWU6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICLlrZjlnKjov53op4Tmk43kvZwiIGluIGh0bWx0ZXh0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOiiq+ajgOa1i+WIsOS6hu+8jOW3sue7j+iiq+Wwge+8jOe7iOatouS7u+WKoe+8jOW/q+WOu+aPkOmGkuWkp+WutuWQp34gIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmICLns7vnu5/nu7TmiqTkuK0iIGluIHRpcFRleHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIDxwIHN0eWxlPSJjb2xvcjpyZWQiPuezu+e7n+e7tOaKpOS4re+8jOmihOiuoeWRqOS4gOaBouWkje+8jOS4jueggeaXoOWFs++8gTxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDmo4DmtYvliLDns7vnu5/nu7TmiqTkuK3vvIzlhazlkYrlhoXlrrnkuLogW3t0aXBUZXh0fV0g77yM57uI5q2i5Lu75YqhIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5cy5leGl0KDApCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV0g5Yid5aeL5YyW5aSx6LSl77yM6K+35omL5Yqo6K6/6Zeu5LiL56Gu6K6k6aG16Z2i5rKh5bSp5rqDIOaIluiAhSDnqI3lkI7lho3or5XlkKfvvIzkuIDnm7TkuI3ooYzvvIzor7fliY3lvoBUR+e+pOWPjemmiH4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLnJlYWRKdW1wUGF0aCA9ICIvaGFvYmFvYmFvL3d0bXBkb21haW4yIgogICAgICAgICAgICAjICMg6I635Y+W5o+Q546w6aG16Z2i5Zyw5Z2ACiAgICAgICAgICAgIHIgPSBzYWZlX3JlcXVlc3QoCiAgICAgICAgICAgICAgICAiR0VUIiwKICAgICAgICAgICAgICAgIGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vd2l0aGRyYXciLAogICAgICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAgICAgIlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMiOiAiMSIsCiAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA3MWQpIFhXRUIvODQ2MSBGbHVlIiwKICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICAgICApCiAgICAgICAgICAgIGh0bWx0ZXh0ID0gci50ZXh0CiAgICAgICAgICAgIHNpZ25pZGwgPSByZS5zZWFyY2goJ3JlcXVlc3RfaWQgPSAiKC4qPykiJywgaHRtbHRleHQpCiAgICAgICAgICAgIGlmIHNpZ25pZGwgPT0gW106CiAgICAgICAgICAgICAgICBpZiBteWtreWRSZWFkUHVyZUxvZyA9PSBGYWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3liJ3lp4vljJYg5o+Q546w5Y+C5pWwIOWksei0pe+8jOWwneivleWPpuS4gOenjeWIneWni+WMliA+Pj4gIikKICAgICAgICAgICAgICAgIHIgPSBzYWZlX3JlcXVlc3QoCiAgICAgICAgICAgICAgICAgICAgIkdFVCIsCiAgICAgICAgICAgICAgICAgICAgZiJodHRwczovL2NvZGUuc3l3am1sb3UuY29tLmNuL2Jhb2Jhb2NvZGUucGhwIiwKICAgICAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBkb21uYWluSG9zdCA9IHIuanNvbigpWyJkYXRhIl1bImx1b2RpIl0uc3BsaXQoIi8iKVsyXQogICAgICAgICAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgKICAgICAgICAgICAgICAgICAgICAiR0VUIiwKICAgICAgICAgICAgICAgICAgICBmImh0dHA6Ly97ZG9tbmFpbkhvc3R9L2hhb2Jhb2Jhby93aXRoZHJhdyIsCiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAgICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIjogIjEiLAogICAgICAgICAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBodG1sdGV4dCA9IHIudGV4dAogICAgICAgICAgICAgICAgc2lnbmlkbCA9IHJlLnNlYXJjaCgncmVxdWVzdF9pZCA9ICIoLio/KSInLCBodG1sdGV4dCkKICAgICAgICAgICAgICAgIGlmIHNpZ25pZGwgPT0gW106CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOWkmuasoeWIneWni+WMliDmj5DnjrDlj4LmlbAg5aSx6LSlLCDotKblj7flvILluLjvvIzor7fmo4Dmn6VDb29raWXvvIEiKQogICAgICAgICAgICAgICAgICAgIHIgPSBzYWZlX3JlcXVlc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICJHRVQiLAogICAgICAgICAgICAgICAgICAgICAgICBmImh0dHBzOi8vY29kZS5zeXdqbWxvdS5jb20uY24vYmFvYmFvY29kZS5waHAiLAogICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIHNlbGYuZG9tbmFpbkhvc3QgPSByLmpzb24oKVsiZGF0YSJdWyJsdW9kaSJdLnNwbGl0KCIvIilbMl0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZXF1ZXN0X2lkID0gc2lnbmlkbFsxXQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5yZXF1ZXN0X2lkID0gc2lnbmlkbFsxXQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgIyByYWlzZSBlCiAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeWIneWni+WMluWksei0pSzor7fmo4Dmn6XkvaDnmoRjayIpCiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgaWYgc2VsZi5pbml0KCk6CiAgICAgICAgICAgIHNlbGYudXNlcl9pbmZvKCkKICAgICAgICAgICAgc2VsZi5nb2xkKCkKICAgICAgICAgICAgaWYgIuebtOaOpeaPkCIgbm90IGluIHNlbGYubmFtZToKICAgICAgICAgICAgICAgIHNlbGYucmVhZCgpCiAgICAgICAgICAgICAgICAjIOWmguaenOaOpeWPo+W0qeS6hu+8jOWwseWwneivleS4ieasoemHjeWQr+mYheivuwogICAgICAgICAgICAgICAgaWYgc2VsZi5yZXRyeVJlYWRpbmcgPT0gVHJ1ZToKICAgICAgICAgICAgICAgICAgICBpZiBteWtreWRSZWFkUHVyZUxvZyA9PSBGYWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOajgOa1i+WIsOmYheivu+aOpeWPo+W8guW4uO+8jOWwneivlemHjeivlX4iKQogICAgICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKDMpOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlYWQoKQogICAgICAgICAgICAgICAgICAgICAgICAjIOmaj+acuuW7tui/nwogICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHJhbmRvbS5yYW5kb20oKSAqIDMgKyAxKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLnJldHJ5UmVhZGluZyA9PSBGYWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgICAgICBzZWxmLmdvbGQoKQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHNlbGYud2l0aGRyYXcoKQoKCmRlZiBnZXROZXdJbnZpdGVVcmwoKToKICAgIHIgPSBzYWZlX3JlcXVlc3QoCiAgICAgICAgIkdFVCIsICJodHRwczovL2NvZGUuc3l3am1sb3UuY29tLmNuL2Jhb2Jhb2NvZGUucGhwIiwgdmVyaWZ5PUZhbHNlCiAgICApLmpzb24oKQogICAgaWYgci5nZXQoImNvZGUiKSA9PSAwOgogICAgICAgIG5ld0VudHJ5VXJsID0gci5nZXQoImRhdGEiKS5nZXQoImx1b2RpIikKICAgICAgICBwYXJzZWRfdXJsID0gdXJscGFyc2UobmV3RW50cnlVcmwpCiAgICAgICAgaG9zdCA9IHBhcnNlZF91cmwuaG9zdG5hbWUKICAgICAgICByZXR1cm4gZiJodHRwOi8vczFpNi4xb2JnLnNob3AvaGFvYmFvYmFvL2F1dGgvNTg0ODdmMjkxOTg1YzVmMzJjMTZiM2IwMWI5NmE5MTIiLnJlcGxhY2UoCiAgICAgICAgICAgICJzMWk2LjFvYmcuc2hvcCIsIGhvc3Qgb3IgInMxaTYuMW9iZy5zaG9wIgogICAgICAgICkKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuICJodHRwOi8vczFpNi4xb2JnLnNob3AvaGFvYmFvYmFvL2F1dGgvNTg0ODdmMjkxOTg1YzVmMzJjMTZiM2IwMWI5NmE5MTIiCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgICMgYXBwVG9rZW7vvJrov5nkuKrmmK/loat3eHB1c2hlcueahGFwcFRva2VuCiAgICAjIHRvcGljSWRz77ya6L+Z5Liq5pivd3hwdXNoZXLnmoR0b3BpY0lkc+aUueaIkOS9oOiHquW3seeahAogICAgIyDnpLrkvos6IOW5u+eUnyNvWmRCcDA0cHNnb044ZE4xRVRfdW84MU5UQzMxIzMwMDAjQVRfVXlJbGJqMjIyMm55bkVTYk0ydkp5QTdEcm1VbVVYRCMxMTY4NgogICAgYWNjb3VudHMgPSBvcy5nZXRlbnYoIm15a2t5ZCIpCiAgICBpbnZpdGVVcmwgPSBnZXROZXdJbnZpdGVVcmwoKQogICAgaWYgYWNjb3VudHMgaXMgTm9uZToKICAgICAgICBwcmludChmIuS9oOayoeacieWhq+WFpW15a2t5ZO+8jOWSi+i/kOihjO+8n1xu6LWw5LiL6YKA6K+35ZGX77yae2ludml0ZVVybH0iKQogICAgZWxzZToKICAgICAgICAjIOiOt+WPlueOr+Wig+WPmOmHj+eahOWAvO+8jOW5tuaMieaMh+WumuWtl+espuS4suWIhuWJsuaIkOWkmuS4qui0puWPt+eahOWPguaVsOe7hOWQiAogICAgICAgIGFjY291bnRzX2xpc3QgPSBvcy5lbnZpcm9uLmdldCgibXlra3lkIikuc3BsaXQoIiYiKQoKICAgICAgICAjIOi+k+WHuuacieWHoOS4qui0puWPtwogICAgICAgIG51bV9vZl9hY2NvdW50cyA9IGxlbihhY2NvdW50c19saXN0KQogICAgICAgIG1vcmVUaXAgPSAiIgogICAgICAgIGlmIHJlYWRQb3N0RGVsYXkgPiAwOgogICAgICAgICAgICBtb3JlVGlwID0gZiLlt7Lorr7nva7nmoTmjqjpgIHmlofnq6DnrYnlvoXngrnlh7vml7bpl7TkuLoge3JlYWRQb3N0RGVsYXl956eSICIKICAgICAgICBwcmludCgKICAgICAgICAgICAgZiLlvZPliY3ohJrmnKzniYjmnKzvvJrlubvnlJ/prZTmlLnoh6rnlKjniYggVjEuNjEgXG7lubvnlJ/mj5DnpLrvvJrojrflj5bliLAge251bV9vZl9hY2NvdW50c30g5Liq6LSm5Y+3IHttb3JlVGlwfVxu5rOo5YaM5Zyw5Z2A77yae2ludml0ZVVybH0iCiAgICAgICAgKQoKICAgICAgICAjIOmBjeWOhuaJgOaciei0puWPtwogICAgICAgIGZvciBpLCBhY2NvdW50IGluIGVudW1lcmF0ZShhY2NvdW50c19saXN0LCBzdGFydD0xKToKICAgICAgICAgICAgIyBwcmludCgiXG4iKQogICAgICAgICAgICBwcmludCgiLSIgKiA1MCkKICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1d5byA5aeL5omn6KGM5Lu75YqhID4+PiIpCiAgICAgICAgICAgICMgcHJpbnQoIlxuIikKICAgICAgICAgICAgIyDmjIlA56ym5Y+35YiG5Ymy5b2T5YmN6LSm5Y+355qE5LiN5ZCM5Y+C5pWwCiAgICAgICAgICAgIHZhbHVlcyA9IGFjY291bnQuc3BsaXQoIiMiKQogICAgICAgICAgICAjIHByaW50KHZhbHVlcykKICAgICAgICAgICAgY2cgPSB7fQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBsZW4odmFsdWVzKSA9PSAyOgogICAgICAgICAgICAgICAgICAgIGNnID0gewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IHZhbHVlc1swXSwKICAgICAgICAgICAgICAgICAgICAgICAgIkNvb2tpZSI6IHZhbHVlc1sxXSwKICAgICAgICAgICAgICAgICAgICAgICAgInR4YnoiOiAzMDAwLAogICAgICAgICAgICAgICAgICAgICAgICAiYWxpQWNjb3VudCI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAiYWxpTmFtZSI6ICIiLAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgY2cgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogdmFsdWVzWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogdmFsdWVzWzFdLAogICAgICAgICAgICAgICAgICAgICAgICAidHhieiI6IHZhbHVlc1syXSBvciAzMDAwLAogICAgICAgICAgICAgICAgICAgICAgICAiYWxpQWNjb3VudCI6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAiYWxpTmFtZSI6ICIiLAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgIyDlpITnkIblvILluLgKICAgICAgICAgICAgICAgIHByaW50KCLlubvnlJ/pgLzpgLzlj6g6IiwgIumFjee9rueahOWVpeeOqeaEj++8jOe8uuWPguaVsOS6huaGqOaJue+8jOeci+a4heiEmuacrOivtOaYju+8gSIpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBjZ1siYXBwVG9rZW4iXSA9IHd4cHVzaGVyQXBwVG9rZW4gb3IgIiIKICAgICAgICAgICAgY2dbInRvcGljSWRzIl0gPSB3eHB1c2hlclRvcGljSWQgb3IgIiIKICAgICAgICAgICAgIyBwcmludCgi5omL5Yqo77yaIiwgbGVuKHZhbHVlcyksIHZhbHVlc1s0XSkKICAgICAgICAgICAgaWYgbGVuKHZhbHVlcykgPj0gNDoKICAgICAgICAgICAgICAgIGlmIHZhbHVlc1szXToKICAgICAgICAgICAgICAgICAgICBjZ1siYXBwVG9rZW4iXSA9IHZhbHVlc1szXQogICAgICAgICAgICBpZiBsZW4odmFsdWVzKSA+PSA1OgogICAgICAgICAgICAgICAgaWYgdmFsdWVzWzRdOgogICAgICAgICAgICAgICAgICAgIGNnWyJ0b3BpY0lkcyJdID0gdmFsdWVzWzRdCiAgICAgICAgICAgIGlmIGxlbih2YWx1ZXMpID49IDY6CiAgICAgICAgICAgICAgICBpZiB2YWx1ZXNbNV06CiAgICAgICAgICAgICAgICAgICAgY2dbImFsaU5hbWUiXSA9IHZhbHVlc1s1XQogICAgICAgICAgICBpZiBsZW4odmFsdWVzKSA+PSA3OgogICAgICAgICAgICAgICAgaWYgdmFsdWVzWzZdOgogICAgICAgICAgICAgICAgICAgIGNnWyJhbGlBY2NvdW50Il0gPSB2YWx1ZXNbNl0KICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaWYgd2VjaGF0QnVzc2luZXNzS2V5ID09ICIiOgogICAgICAgICAgICAgICAgICAgIGlmIGNnWyJhcHBUb2tlbiJdLnN0YXJ0c3dpdGgoIkFUXyIpID09IEZhbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0gd3hwdXNoIOmFjee9rumUmeivr++8jOW/q+S7lOe7hueci+WktOmDqOivtOaYju+8gSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgaWYgKGNnWyJhcHBUb2tlbiJdLnN0YXJ0c3dpdGgoIkFUXyIpID09IEZhbHNlKSBvciAoCiAgICAgICAgICAgICAgICAgICAgICAgIGNnWyJ0b3BpY0lkcyJdLmlzZGlnaXQoKSA9PSBGYWxzZQogICAgICAgICAgICAgICAgICAgICk6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSB3eHB1c2gg6YWN572u6ZSZ6K+v77yM5b+r5LuU57uG55yL5aS06YOo6K+05piO77yBIikKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGFwaSA9IEhIWUQoY2cpCiAgICAgICAgICAgICAgICBpZiBjZ1siYWxpTmFtZSJdIGFuZCBjZ1siYWxpQWNjb3VudCJdOgogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0g6YeH55So5LqGIOaUr+S7mOWuneaPkOeOsO+8jOWnk+WQje+8mntjZ1snYWxpTmFtZSddfe+8jOi0puaIt++8mntjZ1snYWxpQWNjb3VudCddfSIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSDph4fnlKjkuoYg5b6u5L+h5o+Q546wIikKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBhcGkucnVuKCkKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAjIHJhaXNlIGUKICAgICAgICAgICAgICAgICAgICBwcmludChmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0g5omn6KGM5Ye66ZSZ77yaIiwgZSkKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgZiLlubvnlJ/mj5DnpLrvvIzotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1dIOWHuumUmeWVpu+8jOS5n+iuuOaYr+W5s+WPsOaOpeWPo+mXrumimO+8jOWPr+S7pei/h+S4gOS8muWwneivlemHjeaWsOi/kOihjO+8jOWmguaenOi/mOaYr+S4jeihjO+8jOivt+WwhuS4i+mdouaKpemUmeaIquWbvuWPkeWIsHRn5Lqk5rWB576kOiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHJhaXNlIGUKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICMgcHJpbnQoIlxuIikKICAgICAgICAgICAgcHJpbnQoIi0iICogNTApCiAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XeaJp+ihjOS7u+WKoeWujOavle+8gSIpCiAgICAgICAgICAgICMgcHJpbnQoIlxuIikK'))
except Exception as e:
    print('脚本执行出错:', str(e))
